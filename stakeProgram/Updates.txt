1) Intialize function
- The initialize function has been updated with input paramters validation
- The admin address is being validated before setting it up in the pool_info account
(from our frontend, we will pass the admin address same as the signer address but we might have differnet vaults and different admins for each stake pool in the future, 
therfore, we have the option to setup the pool admin in the initialize and update pool info function)


2) Stake function
- We are updating the some states before transfer token event so that there is no chance of re-entrance attack

        if stake_info.is_staked {
            return Err(ErrorCode::IsStaked.into());
        }
        stake_info.is_staked = true;

        //transfer tokens

- The above check will make sure that the attackers can not re enter and call the stake function for the same pool again, we are managing the state before the transfer token function

- The stake_counter is a unique integrae vaule, we are using using stake_counter to allow users to stake in the same stake_pool but have different stake_info_account each time.
- stake_info_account is a pda, which is being derived from stake_counter, STAKE_INFO_SEED, signer address, pool address.

      if stake_info.stake_seed == stake_counter {
            return Err(ErrorCode::IsStakeSeed.into());
        }
- By using the above check we make sure that the stake_counter is unique and not already used by the stake_info_account.
- We will be tracking differnt stakes off chain, therfore, there is no need for tracking inside the program, the stakes can be tracked from the stake_info_account pda, which can be fetched off chain 
and we can read data from them




3) 



